scalar Timestamp

"""
  Mobile device information

  normalise device info for Android and iOS

"""

input Device {
  "Unique device id"
  uid: String!,

  "iPhone"
  model: String!,

  "Taylor Luk's iPhone"
  name: String,

  "device locale for internationalisation"
  locale: String,

  "Registered push notification id"
  notification_id: String,

  "iOS 11.1"
  system_name: String,

  "11.1"
  system_version: String
}

"""

  Live Stock Registration

  age: 0

"""
input Registration {

  "Unique livestock asset id. Ex: PNG:0 symbol:token_id "
  uid: String!,

  "Type of livestock Pig, Goat, Horse",
  type: String!,

  "Name of the livestock, defaults to owner (Taylor's Pig)",
  name: String!,

  "Latest image",
  image: String,

  "Age can be used to approximate a exact birth_date, when a pig is registered after birth"
  age: Float,

  birth_date: Timestamp!
  birth_place: String

  origin: String!
  breed: String
  skin: String!
  parents: [String]

  weight: Float!
  location: [Float]
}

input Updatable {
  id: String,
  image: String,
  location: [Float],

  "Livestock weight in grams"
  weight: Float,
  diet: [String],
  medications: [String],

  "has incident (injury, disease, pregnant, birth, death)"
  incident: String,

  # Rate attributes
  death_place: String
  death_time: Timestamp
  name: String
  description: String
}

type Query {
  account(id: String, device_id: String): Account
  accounts: [Account]
  asset(id: String!): LivestockAsset
  assets: [LivestockAsset]
}

type Mutation {
  "Name of account, mobile number with country code, device hash"
  createAccount(name: String!, mobile: String!, device: Device!): Account,

  "SMS Verification code with a account id or address (1 or 0x111)"
  verifyAccount(id:String!, code: String!, device: Device): Account,

  "Register a live stock, id can be account id or address (1 or 0x111)"
  register(account_id: String!, asset: Registration!): LivestockAsset,

  "Provide a update on a live stock, unique asset id (PNG:1)"
  update(account_id: String!, asset_id: String!, data: Updatable!): LivestockAsset
}

# Time series data [{time, value}, {time,value}]
type TimeValue {
  time: Timestamp
  value: Float
}

type Account {
  id: String
  name: String
  mobile: String,

  "Ethereum address"
  address: String
  assets: [LivestockAsset]
}

"""
 Livestock lifecycle events

  Registration data(location: )

"""
type Event {
  id: Int,

  "Birth, Death, Update (has incident, disease, pragment, birth), Transfer"
  name: String!,

  "type of event (reserved)",
  type: String,

  "JSON encoded data blurb"
  data: String,

  "Blockchain Transactino id"
  txid: String,

  "User initiated signiture"
  signiture: String,

  "Unix timestamp or ISO8601 time"
  time: Timestamp

}

type LivestockAsset {

  "Unique livestock asset id. (symbol:id) Ex: PNG:0, CK:1"
  uid: String,

  "Type of livestock Pig, Goat, Horse",
  type: String,

  "numeric livestock id"
  id: String,

  "Name of the livestock, defaults to owner (Taylor's Pig)",
  name: String,

  "Latest image",
  image: String,

  "Short description",
  description: String,

  "Convinent attribute "
  age: Float,
  birth_date: Timestamp,
  birth_place: String,
  gender: String,
  breed: String,
  skin: String,

  origin: String,
  parents: [LivestockAsset],

  location: [Float],
  weight: Float,
  price: Float,

  diet: [String],
  medications: [String],

  owner: [Account],
  events: [Event],

  # Convinent way to access through relations
  images: [String],
  weights: [TimeValue]
  prices: [TimeValue]

  #
  death_place: String
  death_date: Timestamp
}
